groups:
  - name: application-service-alerts
    rules:
      # --- Service Down Alert ---
      - alert: InstanceDown
        expr: up == 0
        # Fire if the instance is down for 5 minutes straight
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Instance {{ $labels.instance }} down"
          description: "{{ $labels.job }} instance {{ $labels.instance }} has been down for more than 5 minutes."


      - alert: HighAverageHttpRequestLatency
        # Average latency over 5m > 0.5 seconds
        expr: |
          sum(rate(http_server_requests_seconds_sum{job=~".+"}[5m])) by (job, instance)
          /
          sum(rate(http_server_requests_seconds_count{job=~".+"}[5m])) by (job, instance)
          > 0.5 # <<< ADJUST THRESHOLD (seconds)
        # Fire if the high latency persists for 7 minutes
        for: 7m
        labels:
          severity: warning
        annotations:
          summary: "High average HTTP request latency for {{ $labels.job }} ({{ $labels.instance }})"
          description: "Average latency is {{ $value | printf \"%.2f\" }}s (threshold > 0.5s) for job {{ $labels.job }} instance {{ $labels.instance }} for the last 7 minutes."

      - alert: HighMaxHttpRequestLatency
        # Average of the max latency reported within scrapes over 5m > 2 seconds
        expr: |
          avg_over_time(http_server_requests_seconds_max{job=~".+"}[5m])
          > 2 # <<< ADJUST THRESHOLD (seconds)
        # Fire if high max latency persists for 7 minutes
        for: 7m
        labels:
          severity: warning
        annotations:
          summary: "High maximum HTTP request latency spikes for {{ $labels.job }} ({{ $labels.instance }})"
          description: "Average maximum latency is {{ $value | printf \"%.2f\" }}s (threshold > 2s) for job {{ $labels.job }} instance {{ $labels.instance }} for the last 7 minutes. Investigate outlier requests."

      - alert: LowHttpRequestRate
        # Request rate over 5m < 1 request/second
        expr: |
          sum(rate(http_server_requests_seconds_count{job=~".+"}[5m])) by (job, instance)
          < 1 # <<< ADJUST THRESHOLD (requests/sec)
        # Fire if low rate persists for 7 minutes
        for: 7m
        labels:
          severity: warning
        annotations:
          summary: "Low HTTP request rate for {{ $labels.job }} ({{ $labels.instance }})"
          description: "Request rate is {{ $value | printf \"%.2f\" }} req/s (threshold < 1 req/s) for job {{ $labels.job }} instance {{ $labels.instance }} for the last 7 minutes. Is the service healthy or receiving traffic?"
